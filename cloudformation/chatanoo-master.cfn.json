
{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Create the complete stack to run Chatanoo on your AWS Account.",

  "Parameters": {
    "CloudFormationBucket": {
      "Description": "The bucket used to store CloudFormation templates",
      "Type": "String",
      "Default": "chatanoo-cloudformation"
    },
    "IAMTemplateKey": {
      "Description": "The key of the template for the IAM substack",
      "Type": "String",
      "Default": "templates/chatanoo-iam.cfn.json"
    },
    "VPCTemplateKey": {
      "Description": "The key of the template for the VPC scaffold substack",
      "Type": "String",
      "Default": "templates/chatanoo-vpc.cfn.json"
    },
    "Route53TemplateKey": {
      "Description": "The key of the template for the Route53 substack",
      "Type": "String",
      "Default": "templates/chatanoo-route53.cfn.json"
    },
    "CDNTemplateKey": {
      "Description": "The key of the template for the CDN substack",
      "Type": "String",
      "Default": "templates/chatanoo-cdn.cfn.json"
    },
    "CoreTemplateKey": {
      "Description": "The key of the template for the Core substack",
      "Type": "String",
      "Default": "templates/chatanoo-core.cfn.json"
    },
    "MobileTemplateKey": {
      "Description": "The key of the template for the Mobile substack",
      "Type": "String",
      "Default": "templates/chatanoo-mobile.cfn.json"
    },
    "AdminTemplateKey": {
      "Description": "The key of the template for the Admin substack",
      "Type": "String",
      "Default": "templates/chatanoo-admin.cfn.json"
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk and Bastion hosts",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "SSHFrom": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "BastionInstanceType": {
      "Description": "Bastion Host EC2 instance type",
      "Type": "String",
      "Default": "t1.micro",
      "AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "NATInstanceType": {
      "Description": "NAT Device EC2 instance type",
      "Type": "String",
      "Default": "t1.micro",
      "AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPCAvailabilityZone1": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VPCAvailabilityZone2": {
      "Description": "Two of two Availability Zones that will be used to create subnets. Must be different than VPCAvailabilityZone2.",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "MinLength": "1",
      "MaxLength": "255"
    },

    "Domain": {
      "Description": "Domain Name used to host the project in Route53.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },

    "CoreDBPassword": {
      "Description": "Database admin account password.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    }
  },

  "Resources": {
    "IAMScaffold" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "IAMTemplateKey" }]]},
        "Parameters" : {
          "ProjectName": { "Ref" : "AWS::StackName" }
        }
      }
    },
    "VPCScaffold" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "VPCTemplateKey" }]]},
        "Parameters" : {
          "KeyName": { "Ref" : "KeyName" },
          "SSHFrom": { "Ref" : "SSHFrom" },
          "BastionInstanceType": { "Ref" : "BastionInstanceType" },
          "NATInstanceType" : { "Ref" : "NATInstanceType"},
          "VPCAvailabilityZone1": { "Ref" : "VPCAvailabilityZone1" },
          "VPCAvailabilityZone2": { "Ref" : "VPCAvailabilityZone2" },
          "ProjectName": { "Ref" : "AWS::StackName" },
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    },
    "Route53" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "Route53TemplateKey" }]]},
        "Parameters" : {
          "DomainName": { "Ref" : "Domain" },
          "VPCId": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.VPCId" ]},
          "NATIPAddress": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.NATIPAddress" ]},
          "BastionIPAddress": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.BastionIPAddress" ]},
          "ProjectName": { "Ref" : "AWS::StackName" },
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    },
    "CDN" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "CDNTemplateKey" }]]},
        "Parameters" : {
          "DomainName": { "Ref" : "Domain" },
          "PublicHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PublicHostedZoneId" ]},
          "PrivateHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PrivateHostedZoneId" ]},
          "ProjectName": { "Ref" : "AWS::StackName" },
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    },
    "Core" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "CoreTemplateKey" }]]},
        "Parameters" : {
          "DomainName": { "Ref" : "Domain" },
          "PublicHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PublicHostedZoneId" ]},
          "PrivateHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PrivateHostedZoneId" ]},
          "ProjectName": { "Ref" : "AWS::StackName" },
          "KeyName": { "Ref" : "KeyName" },
          "VPCId": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.VPCId" ]},
          "InstanceSecurityGroup": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.InstanceSecurityGroup" ]},
          "PublicSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet2" ]}]]},
          "PrivateSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet2" ]}]]},
          "DatabasePassword": { "Ref" : "CoreDBPassword" },
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    },
    "Mobile" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "MobileTemplateKey" }]]},
        "Parameters" : {
          "DomainName": { "Ref" : "Domain" },
          "PublicHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PublicHostedZoneId" ]},
          "PrivateHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PrivateHostedZoneId" ]},
          "ProjectName": { "Ref" : "AWS::StackName" },
          "KeyName": { "Ref" : "KeyName" },
          "VPCId": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.VPCId" ]},
          "InstanceSecurityGroup": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.InstanceSecurityGroup" ]},
          "PublicSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet2" ]}]]},
          "PrivateSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet2" ]}]]},
          "CoreURL": { "Fn::GetAtt" : [ "Core", "Outputs.CoreURL" ]},
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    },
    "Admin" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", [ "http://", { "Ref" : "CloudFormationBucket" }, ".s3.amazonaws.com/", { "Ref" : "AdminTemplateKey" }]]},
        "Parameters" : {
          "DomainName": { "Ref" : "Domain" },
          "PublicHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PublicHostedZoneId" ]},
          "PrivateHostedZoneId": { "Fn::GetAtt" : [ "Route53", "Outputs.PrivateHostedZoneId" ]},
          "ProjectName": { "Ref" : "AWS::StackName" },
          "KeyName": { "Ref" : "KeyName" },
          "VPCId": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.VPCId" ]},
          "InstanceSecurityGroup": { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.InstanceSecurityGroup" ]},
          "PublicSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PublicSubnet2" ]}]]},
          "PrivateSubnets": { "Fn::Join": [",", [{ "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet1" ]}, { "Fn::GetAtt" : [ "VPCScaffold", "Outputs.PrivateSubnet2" ]}]]},
          "CoreURL": { "Fn::GetAtt" : [ "Core", "Outputs.CoreURL" ]},
          "MobileURL": { "Fn::GetAtt" : [ "Mobile", "Outputs.MobileURL" ]},
          "AdministratorsGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.AdministratorsGroupName" ]},
          "ManagersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.ManagersGroupName" ]},
          "DevelopersGroupName": { "Fn::GetAtt" : [ "IAMScaffold", "Outputs.DevelopersGroupName" ]}
        }
      }
    }
  },

  "Outputs": {
    "CDNURL": {
      "Description": "URL for the CDN",
      "Value": { 
        "Fn::GetAtt" : [ "CDN", "Outputs.CDNURL" ]
      }
    },
    "CoreURL": {
      "Description": "URL for the Core Application",
      "Value": { 
        "Fn::GetAtt" : [ "Core", "Outputs.CoreURL" ]
      }
    },
    "MobileURL": {
      "Description": "URL for the Mobile Application",
      "Value": { 
        "Fn::GetAtt" : [ "Mobile", "Outputs.MobileURL" ]
      }
    },
    "AdminURL": {
      "Description": "URL for the Admin Application",
      "Value": { 
        "Fn::GetAtt" : [ "Admin", "Outputs.AdminURL" ]
      }
    }
  }
}
